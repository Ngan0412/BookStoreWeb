@page "/admin/customer"

@using BookStoreWebAppFE.Models
@inject HttpClient Http
@using DevExpress.Blazor
@rendermode InteractiveServer

<div class="d-flex align-items-center custom-toast-background">
    <DxToastProvider Name="Overview"
                     MaxToastCount="5"
                     AnimationType="ToastAnimationType.Slide"
                     HorizontalAlignment="HorizontalAlignment.Right"
                     VerticalAlignment="VerticalEdge.Top"
                     DisplayTime="TimeSpan.FromSeconds(2)"
                     Width="320px" />
</div>
<PageTitle>Customer</PageTitle>
<h1>Customer</h1>

@if (ListGrid == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DxGrid Data="@ListGrid" style="height:50vh;"
            PageSize="10"
            PageSizeSelectorItems="@ListPage"
            ShowFilterRow="true"
            PagerVisible="true"
            CustomizeEditModel="OnCustomizeEditModel"
            EditModelSaving="OnEditModelSaving"
            DataItemDeleting="OnDataItemDeleting"
            KeyFieldName="id"
            EditMode="GridEditMode.PopupEditForm"
            FocusedRowEnabled=true
            PopupEditFormCssClass="my-style"
            PopupEditFormHeaderText="@title"
            @ref=MyGrid>
        <Columns>
            <DxGridDataColumn Caption="Id" FieldName="id" />
            <DxGridDataColumn Caption="Family Name" FieldName="familyName" />
            <DxGridDataColumn Caption="Given Name" FieldName="givenName" />
            <DxGridDataColumn Caption="Phone" FieldName="phone" />
            <DxGridDataColumn Caption="Address" FieldName="address" />
            <DxGridDataColumn Caption="Gender"  >

				 <CellDisplayTemplate>
					@{
						var item = (Customer)context.DataItem;
                        <span>@(item.gender ? "Female" : "Male")</span>
					}
                 </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn Caption="Date Of Birth" FieldName="dateOfBirth" />
            <DxGridDataColumn Caption="Is Delete" FieldName="IsDeleted" Width="80" />

        </Columns>
        <ToolbarTemplate>
            <DxToolbar>
                <DxToolbar>
                    <DxToolbarItem Text="Create"
                                   IconCssClass="oi oi-plus"
                                   CssClass="me-2 create HButton"
                                   Click="OnCreateNew" />

                    <DxToolbarItem Text="Edit"
                                   IconCssClass="oi oi-pencil"
                                   CssClass="me-2 edit HButton"
                                   Click="OnEdit" />

                    <DxToolbarItem Text="Delete"
                                   IconCssClass="oi oi-trash"
                                   CssClass="me-2 delete HButton"
                                   Click="OnDelete" />

                    <DxToolbarItem Text="Column Chooser"
                                   IconCssClass="oi oi-cog"
                                   CssClass="column-chooser-button ms-3 chooser-column HButton"
                                   BeginGroup="true"
                                   Click="OnShowColumnChooser" />
                </DxToolbar>
            </DxToolbar>
        </ToolbarTemplate>
        <EditFormTemplate Context="editFormContext">
            <DxFormLayout CssClass="my-form-layout">
                <div class="row" style="width: 100%;">
                    <div class="col-lg-12 col-sm-12">
                        <DxFormLayoutItem Caption="Family Name:" CssClass="custom-item">
                            <DxTextBox @bind-Text="@selectedItem.familyName"></DxTextBox>
                            <ValidationMessage For="@(() => selectedItem.familyName)" />
                        </DxFormLayoutItem>
                    </div>
                    <div class="col-lg-12 col-sm-12">
                        <DxFormLayoutItem Caption="Given Name:" CssClass="custom-item">
                            <DxTextBox @bind-Text="@selectedItem.givenName"></DxTextBox>
                            <ValidationMessage For="@(() => selectedItem.givenName)" />
                        </DxFormLayoutItem>
                    </div>
                    <div class="col-lg-12 col-sm-12">
                        <DxFormLayoutItem Caption="Birth Day:" CssClass="custom-item">
                            <DxDateEdit @bind-Date="@selectedItem.dateOfBirth"></DxDateEdit>
                            <ValidationMessage For="@(() => selectedItem.dateOfBirth)" />
                        </DxFormLayoutItem>
                    </div>
                    <div class="col-lg-12 col-sm-12">
                        <DxFormLayoutItem Caption="Phone:" CssClass="custom-item">
                            <DxTextBox @bind-Text="@selectedItem.phone"></DxTextBox>
                            <ValidationMessage For="@(() => selectedItem.phone)" />
                        </DxFormLayoutItem>
                    </div>
                    <div class="col-lg-12 col-sm-12">
                        <DxFormLayoutItem Caption="Address:" CssClass="custom-item">
                            <DxTextBox @bind-Text="@selectedItem.address"></DxTextBox>
                            <ValidationMessage For="@(() => selectedItem.address)" />
                        </DxFormLayoutItem>
                    </div>
                    <div class="col-lg-12 col-sm-12">
                        <DxFormLayoutItem Caption="Gender:" CssClass="custom-item">
                            <DxComboBox @bind-Value="@selectedItem.gender" Data="genderOptions"
                                        TextFieldName="Text"
                                        ValueFieldName="Value" />
                        </DxFormLayoutItem>
                    </div>
                </div>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>
}

@code {
    string urlGrid = "api/customer";
    String title { get; set; } = "";
    bool enableEdit { get; set; } = true;
    List<int> ListPage = new List<int> { 10, 20, 30, 50, 100 };
    [Inject] IToastNotificationService ToastService { get; set; }
    List<GenderOption> genderOptions = new()
    {
        new GenderOption { Value = false, Text = "Male" },
        new GenderOption { Value = true, Text = "Female" }
    };
    List<Customer>? ListGrid { get; set; } = new();
    Customer selectedItem { get; set; } = new();
    IGrid MyGrid { get; set; }
    protected override async Task OnInitializedAsync()
    {
        loadData();
        // loadCategory();
    }
    async void loadData()
    {
         ListGrid = await Http.GetFromJsonAsync<List<Customer>>(urlGrid);
        StateHasChanged();
    }
    // async void loadCategory()
    // {
    //     categories = await Http.GetFromJsonAsync<List<Category>>(urlCategory);
    //     StateHasChanged();
    // }

    void OnCustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        selectedItem = (Customer)e.EditModel;
        if (e.IsNew)
        {
            title = "Create form";
            enableEdit = true;
        }
        else
        {
            title = "Edit form";
            enableEdit = false;
        }
        StateHasChanged();
    }
    async Task OnEditModelSaving(GridEditModelSavingEventArgs e)
    {
        HttpResponseMessage response;
        if (e.IsNew)
        {
            // Tạo mới
            selectedItem = (Customer)e.EditModel;
            response = await Http.PostAsJsonAsync(urlGrid, selectedItem);

        }
        else
        {
            // Sửa
            // e.CopyChangesToDataItem(); Copy từ model vào data item hiển thị
            selectedItem = (Customer)e.EditModel;
            response = await Http.PutAsJsonAsync($"{urlGrid}/{selectedItem.id}", selectedItem);

        }
        var result = await response.Content.ReadFromJsonAsync<ApiMessageResponse>();
        if (response.IsSuccessStatusCode)
        {
            // ✅ Đọc nội dung trả về từ API

            ToastService.ShowToast(new ToastOptions() // SUCCESS
                {
                    ProviderName = "Overview",
                    ThemeMode = ToastThemeMode.Saturated,
                    RenderStyle = ToastRenderStyle.Success,
                    Title = $"{result?.Message}",
                });
        }
        else
        {
            ToastService.ShowToast(new ToastOptions() //ERROR
                {
                    ProviderName = "Overview",
                    ThemeMode = ToastThemeMode.Saturated,
                    RenderStyle = ToastRenderStyle.Danger,
                    Title = $"{result?.Message}"
                });
        }
        // ToastService.ShowToast(new ToastOptions()WARNING
        //     {
        //         ProviderName = "Overview",
        //         ThemeMode = ToastThemeMode.Light,
        //         RenderStyle = ToastRenderStyle.Warning,
        //         Title = "Cannot open file",
        //     });
        // ToastService.ShowToast(new ToastOptions() ERROR
        //     {
        //         ProviderName = "Overview",
        //         ThemeMode = ToastThemeMode.Saturated,
        //         RenderStyle = ToastRenderStyle.Danger,
        //         Title = "Job failed: 'validation'"
        //     });
        // ToastService.ShowToast(new ToastOptions() SUCCESS
        //     {
        //         ProviderName = "Overview",
        //         ThemeMode = ToastThemeMode.Saturated,
        //         RenderStyle = ToastRenderStyle.Success,
        //         Title = "File download complete"
        //     });
        loadData();
        StateHasChanged();
    }

    async Task OnDataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var item = (Customer)e.DataItem;
        var response = await Http.DeleteAsync($"{urlGrid}/{item.id}");
        var result = await response.Content.ReadFromJsonAsync<ApiMessageResponse>();
        if (response.IsSuccessStatusCode)
        {
            // ✅ Đọc nội dung trả về từ API

            ToastService.ShowToast(new ToastOptions() // SUCCESS
                {
                    ProviderName = "Overview",
                    ThemeMode = ToastThemeMode.Saturated,
                    RenderStyle = ToastRenderStyle.Success,
                    Title = $"{result?.Message}",
                });
        }
        else
        {
            ToastService.ShowToast(new ToastOptions() //ERROR
                {
                    ProviderName = "Overview",
                    ThemeMode = ToastThemeMode.Saturated,
                    RenderStyle = ToastRenderStyle.Danger,
                    Title = $"{result?.Message}"
                });
        }
        loadData();
        StateHasChanged();
    }

    async Task OnCreateNew(ToolbarItemClickEventArgs e)
    {
        await MyGrid.StartEditNewRowAsync();
    }

    async Task OnEdit(ToolbarItemClickEventArgs e)
    {
        if (MyGrid.GetFocusedDataItem() != null)
            await MyGrid.StartEditDataItemAsync(MyGrid.GetFocusedDataItem());
    }

    void OnDelete(ToolbarItemClickEventArgs e)
    {
        if (MyGrid.GetFocusedDataItem() != null)
            MyGrid.ShowDataItemDeleteConfirmation(MyGrid.GetFocusedDataItem());
    }

    void OnShowColumnChooser()
    {
        MyGrid.ShowColumnChooser(".column-chooser-button");
    }
    public class ApiMessageResponse
    {
        public string Message { get; set; }
    }
    public class GenderOption
    {
        public bool Value { get; set; }
        public string Text { get; set; } = string.Empty;
    }
}