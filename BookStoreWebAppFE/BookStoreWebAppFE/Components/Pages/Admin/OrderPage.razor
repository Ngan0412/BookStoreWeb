@page "/admin/order"

@using BookStoreWebAppFE.Models
@inject HttpClient Http
@using DevExpress.Blazor
@rendermode InteractiveServer

<div class="d-flex align-items-center custom-toast-background">
    <DxToastProvider Name="Overview"
    MaxToastCount="5"
    AnimationType="ToastAnimationType.Slide"
    HorizontalAlignment="HorizontalAlignment.Right"
    VerticalAlignment="VerticalEdge.Top"
    DisplayTime="TimeSpan.Zero"
    Width="320px" />
</div>
<PageTitle>Order</PageTitle>
<h1>Order</h1>

@if (ListGrid == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DxGrid Data="@ListGrid" style="height:70vh;"
    PageSize="10"
    PageSizeSelectorItems="@ListPage"
    ShowFilterRow="true"
    PagerVisible="true"
    CustomizeEditModel="OnCustomizeEditModel"
    EditModelSaving="OnEditModelSaving"
    DataItemDeleting="OnDataItemDeleting"
    KeyFieldName="id"
    EditMode="GridEditMode.PopupEditForm"
    FocusedRowEnabled=true
    PopupEditFormCssClass="my-style"
    PopupEditFormHeaderText="@title"
    @ref=MyGrid>
        <Columns>
            <!-- Staff -->
            <DxGridDataColumn Caption="Staff">
                <FilterRowCellTemplate>
                    <DxComboBox Data="@staffs"
                    @bind-Value="filterStaff"
                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                    TextFieldName="@nameof(selectedStaff.GivenName)"
                    SelectedItemChanged="(Staff value) => SelectedStaffFilter(value)">
                    </DxComboBox>
                </FilterRowCellTemplate>
                <CellDisplayTemplate>
                    @{
                        var data = (Order)context.DataItem;
                        var staff = staffs?.FirstOrDefault(s => s.id == data.StaffId) ;
                        string staffName =( staff  != null) ? staff.GivenName : string.Empty;
                    }
                    <span>@staffName</span>
                </CellDisplayTemplate>
            </DxGridDataColumn>

            <!-- Customer -->
            <DxGridDataColumn Caption="Customer">
                <FilterRowCellTemplate>
                    <DxComboBox Data="@customers"
                    @bind-Value="filterCustomer"
                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                    TextFieldName="@nameof(selectedCustomer.givenName)"
                    SelectedItemChanged="(Customer value) => SelectedCustomerFilter(value)">
                    </DxComboBox>
                </FilterRowCellTemplate>
                <CellDisplayTemplate>
                    @{
                        var data = (Order)context.DataItem;
                        var customer = customers?.FirstOrDefault(s => s.id == data.CustomerId);
                        string customerName = (customer != null) ?  customer.givenName : string.Empty;
                    }
                    <span>@customerName</span>
                </CellDisplayTemplate>
            </DxGridDataColumn>

            <!-- Promotion -->
            <DxGridDataColumn Caption="Promotion">
                <FilterRowCellTemplate>
                    <DxComboBox Data="@promotions"
                    @bind-Value="filterPromotion"
                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                    TextFieldName="@nameof(selectedPromotion.name)"
                    SelectedItemChanged="(Promotion value) => SelectedPromotionFilter(value)">
                    </DxComboBox>
                </FilterRowCellTemplate>
                <CellDisplayTemplate>
                    @{
                        var data = (Order)context.DataItem;
                        string promotionName = promotions?.FirstOrDefault(p => p.id == data.PromotionId) is { name: var name } ? name : string.Empty;
                    }
                    <span>@promotionName</span>
                </CellDisplayTemplate>
            </DxGridDataColumn>

            <!-- Các cột còn lại -->
            <DxGridDataColumn Caption="Created Time" FieldName="CreatedTime"  Width="150" />
            <DxGridDataColumn Caption="Sub Total" FieldName="SubTotalAmount" Width="100" />
            <DxGridDataColumn Caption="Promotion Amount" FieldName="PromotionAmount" Width="100" />
            <DxGridDataColumn Caption="Total" FieldName="TotalAmount" Width="100" />

            <DxGridDataColumn Caption="Status" FieldName="Status">
                <CellDisplayTemplate>
                    @((bool)context.Value ? "Completed" : "Pending")
                </CellDisplayTemplate>
            </DxGridDataColumn>

            <DxGridDataColumn Caption="Note" FieldName="Note" Width="200" />
            <DxGridDataColumn Caption="Is Deleted" FieldName="IsDeleted" Width="200" />
        </Columns>

        <ToolbarTemplate>
            <DxToolbar>
                <DxToolbarItem Text="Create"
                IconCssClass="oi oi-plus"
                CssClass="me-2 create HButton"
                Click="OnCreateNew" />

                <DxToolbarItem Text="Edit"
                IconCssClass="oi oi-pencil"
                CssClass="me-2 edit HButton"
                Click="OnEdit" />

                <DxToolbarItem Text="Delete"
                IconCssClass="oi oi-trash"
                CssClass="me-2 delete HButton"
                Click="OnDelete" />

                <DxToolbarItem Text="Column Chooser"
                IconCssClass="oi oi-cog"
                CssClass="column-chooser-button ms-3 chooser-column HButton"
                BeginGroup="true"
                Click="OnShowColumnChooser" />
            </DxToolbar>
        </ToolbarTemplate>
        <EditFormTemplate Context="editFormContext">
            <DxFormLayout CssClass="my-form-layout">
                <div class="row">                                      
                    @if (!IsEdit)
                    {
                        <!-- Customer -->
                        <div class="col-lg-6 col-sm-12">
                            <DxFormLayoutItem Caption="Customer:" CssClass="custom-item">
                                <DxComboBox Data="@customers"
                                SearchFilterCondition="ListSearchFilterCondition.Contains"
                                @bind-Value="@selectedItem.CustomerId"
                                TextFieldName="@nameof(selectedCustomer.givenName)"
                                ValueFieldName="@nameof(selectedCustomer.id)" />
                            </DxFormLayoutItem>
                        </div>

                        <!-- Promotion -->
                        <div class="col-lg-6 col-sm-12">
                            <DxFormLayoutItem Caption="Promotion:" CssClass="custom-item">
                                <DxComboBox Data="@promotions"
                                SearchFilterCondition="ListSearchFilterCondition.Contains"
                                @bind-Value="@selectedItem.PromotionId"
                                TextFieldName="@nameof(selectedPromotion.name)"
                                ValueFieldName="@nameof(selectedPromotion.id)" />
                            </DxFormLayoutItem>
                        </div>
                        <div class="col-lg-12 col-sm-12" style="margin-left:12px;">
                            Order Item
                        </div>

                        @foreach (var item in ListOrderItem)
                        {
                            <div class="col-4" >
                                <DxFormLayoutItem Caption="Book:" CssClass="custom-item">
                                    <DxComboBox Data="@books"
                                    SearchFilterCondition="ListSearchFilterCondition.Contains"
                                    @bind-Value="@item.BookId"
                                    TextFieldName="@nameof(selectedBook.Title)"
                                    ValueFieldName="@nameof(selectedBook.id)" />
                                </DxFormLayoutItem>
                            </div>
                            <div class="col-4">
                                <DxFormLayoutItem Caption="Quantity:" CssClass="custom-item">
                                    <DxSpinEdit @bind-Value="@item.Quantity" MinValue="1" />
                                </DxFormLayoutItem>
                            </div>
                            <div class="col-4">
                                <DxFormLayoutItem Caption="Price:" CssClass="custom-item">
                                    <DxSpinEdit @bind-Value="@item.Price" Mask="###,###,###,###,##0"
                                    DisplayFormat="{0:n0}"
                                    MaxValue="999999999999999"
                                    MinValue="10000" />
                                </DxFormLayoutItem>
                            </div>
                        }
                        <div class="col-12" style="margin-left:12px;">
                            <DxButton Click="@AddOrderItem"
                            Text="Add Item"
                            IconCssClass="fa-solid fa-plus icon-bt"
                            CssClass="displayStyle btn-success" />

                        </div>
                    }
                    else
                    {
                        <!-- Status -->
                        <div class="col-lg-6 col-sm-12">
                            <DxFormLayoutItem Caption="Status:" CssClass="custom-item">
                                <DxCheckBox @bind-Checked="@selectedItem.Status" />
                            </DxFormLayoutItem>
                        </div>

                        <!-- Note -->
                        <div class="col-12">
                            <DxFormLayoutItem Caption="Note:" CssClass="custom-item">
                                <DxMemo @bind-Text="@selectedItem.Note" Rows="3" />
                            </DxFormLayoutItem>
                        </div>
                    }
                </div>

            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>
}

@code {
    string urlGrid = "api/order";
    string urlBook = "api/book";
    string urlStaff = "api/staff";
    string urlCustomer = "api/customer";
    string urlPromotion = "api/promotion";
    String title { get; set; } = "";
    bool IsEdit { get; set; } = true;
    List<int> ListPage = new List<int> { 10, 20, 30, 50, 100 };
    [Inject] IToastNotificationService ToastService { get; set; }
    List<Order>? ListGrid { get; set; } = new();
    List<Order>? ListOrder { get; set; } = new();
    Order selectedItem { get; set; } = new();
    List<OrderItem>? ListOrderItem { get; set; } = new();
    List<Staff>? staffs { get; set; } = new();
    Staff? selectedStaff { get; set; } = new();
    Staff? filterStaff { get; set; }
    List<Customer>? customers { get; set; } = new();
    Customer? selectedCustomer { get; set; } = new();
    Customer? filterCustomer { get; set; }
    List<Promotion>? promotions { get; set; } = new();
    Promotion? selectedPromotion { get; set; } = new();
    Promotion? filterPromotion { get; set; }
    List<Book>? books { get; set; } = new();
    Book selectedBook { get; set; } = new();
    IGrid MyGrid { get; set; }
    protected override async Task OnInitializedAsync()
    {
        loadCustomer();
        loadStaff();
        loadPromotion();
        loadBook();
        loadData();
        StateHasChanged();
    }
    async void loadData()
    {
        var result = await Http.GetFromJsonAsync<List<Order>>(urlGrid);
        ListOrder = result.ToList();
        ListGrid = result.ToList();
        StateHasChanged();
    }
    async void loadCustomer()
    {
        customers = await Http.GetFromJsonAsync<List<Customer>>(urlCustomer);
        StateHasChanged();
    }
    async void loadBook()
    {
        var response = await Http.GetFromJsonAsync<List<Book>>(urlBook);
        books = response.Where(data => data.isDeleted == false).ToList();
        StateHasChanged();
    }
    async void loadStaff()
    {
        staffs = await Http.GetFromJsonAsync<List<Staff>>(urlStaff);
        StateHasChanged();
    }
    async void loadPromotion()
    {
        promotions = await Http.GetFromJsonAsync<List<Promotion>>(urlPromotion);
        StateHasChanged();
    }

    async Task OnCustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        selectedItem = (Order)e.EditModel;
        if (e.IsNew)
        {
            title = "Create form";
            IsEdit = false;
            selectedStaff = new();
            selectedCustomer = new();
            selectedPromotion = new();
            ListOrderItem = new();
        }
        else
        {
            selectedStaff = staffs?.FirstOrDefault(c => c.id == selectedItem.StaffId);
            selectedCustomer = customers?.FirstOrDefault(c => c.id == selectedItem.CustomerId);
            selectedPromotion = promotions?.FirstOrDefault(c => c.id == selectedItem.PromotionId);
            ListOrderItem = await Http.GetFromJsonAsync<List<OrderItem>>($"{urlGrid}/items/{selectedItem.id}");
            title = "Edit form";
            IsEdit = true;
        }
        StateHasChanged();
    }
    async Task OnEditModelSaving(GridEditModelSavingEventArgs e)
    {
        HttpResponseMessage response;
        if (e.IsNew)
        {
            // Tạo mới
            selectedItem = (Order)e.EditModel;
            foreach (var item in ListOrderItem)
            {
                item.OrderId = selectedItem.id;
                if (item.BookId != Guid.Empty)
                {
                    selectedItem.Items.Add(item);
                }
            }
            response = await Http.PostAsJsonAsync(urlGrid, selectedItem);

        }
        else
        {
            // Sửa
            // e.CopyChangesToDataItem(); Copy từ model vào data item hiển thị
            selectedItem = (Order)e.EditModel;
            response = await Http.PutAsJsonAsync($"{urlGrid}/{selectedItem.id}", selectedItem);

        }
        var result = await response.Content.ReadFromJsonAsync<ApiMessageResponse>();
        if (response.IsSuccessStatusCode)
        {
            // ✅ Đọc nội dung trả về từ API

            ToastService.ShowToast(new ToastOptions() // SUCCESS
                {
                    ProviderName = "Overview",
                    ThemeMode = ToastThemeMode.Saturated,
                    RenderStyle = ToastRenderStyle.Success,
                    Title = $"{result?.Message}",
                });
        }
        else
        {
            ToastService.ShowToast(new ToastOptions() //ERROR
                {
                    ProviderName = "Overview",
                    ThemeMode = ToastThemeMode.Saturated,
                    RenderStyle = ToastRenderStyle.Danger,
                    Title = $"{result?.Message}"
                });
        }
        // ToastService.ShowToast(new ToastOptions()WARNING
        //     {
        //         ProviderName = "Overview",
        //         ThemeMode = ToastThemeMode.Light,
        //         RenderStyle = ToastRenderStyle.Warning,
        //         Title = "Cannot open file",
        //     });
        // ToastService.ShowToast(new ToastOptions() ERROR
        //     {
        //         ProviderName = "Overview",
        //         ThemeMode = ToastThemeMode.Saturated,
        //         RenderStyle = ToastRenderStyle.Danger,
        //         Title = "Job failed: 'validation'"
        //     });
        // ToastService.ShowToast(new ToastOptions() SUCCESS
        //     {
        //         ProviderName = "Overview",
        //         ThemeMode = ToastThemeMode.Saturated,
        //         RenderStyle = ToastRenderStyle.Success,
        //         Title = "File download complete"
        //     });
        loadData();
        StateHasChanged();
    }

    async Task OnDataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var item = (Order)e.DataItem;
        var response = await Http.DeleteAsync($"{urlGrid}/{item.id}");
        var result = await response.Content.ReadFromJsonAsync<ApiMessageResponse>();
        if (response.IsSuccessStatusCode)
        {
            // ✅ Đọc nội dung trả về từ API

            ToastService.ShowToast(new ToastOptions() // SUCCESS
                {
                    ProviderName = "Overview",
                    ThemeMode = ToastThemeMode.Saturated,
                    RenderStyle = ToastRenderStyle.Success,
                    Title = $"{result?.Message}",
                });
        }
        else
        {
            ToastService.ShowToast(new ToastOptions() //ERROR
                {
                    ProviderName = "Overview",
                    ThemeMode = ToastThemeMode.Saturated,
                    RenderStyle = ToastRenderStyle.Danger,
                    Title = $"{result?.Message}"
                });
        }
        loadData();
        StateHasChanged();
    }

    async Task OnCreateNew(ToolbarItemClickEventArgs e)
    {
        await MyGrid.StartEditNewRowAsync();
    }

    async Task OnEdit(ToolbarItemClickEventArgs e)
    {
        if (MyGrid.GetFocusedDataItem() != null)
            await MyGrid.StartEditDataItemAsync(MyGrid.GetFocusedDataItem());
    }

    void OnDelete(ToolbarItemClickEventArgs e)
    {
        if (MyGrid.GetFocusedDataItem() != null)
            MyGrid.ShowDataItemDeleteConfirmation(MyGrid.GetFocusedDataItem());
    }

    void OnShowColumnChooser()
    {
        MyGrid.ShowColumnChooser(".column-chooser-button");
    }
    public class ApiMessageResponse
    {
        public string Message { get; set; }
    }
    async void SelectedStaffFilter(Staff value)
    {
        filterStaff = value;
        if (value != null)
        {
            ListGrid = ListOrder.Where(x => x.StaffId == value.id).ToList();
        }
        else
        {
            ListGrid = ListOrder.ToList();
        }
        if (filterCustomer != null)
        {
            ListGrid = ListGrid.Where(x => x.CustomerId == filterCustomer.id).ToList();
        }
        if (filterPromotion != null)
        {
            ListGrid = ListGrid.Where(x => x.PromotionId == filterPromotion.id).ToList();
        }
        StateHasChanged();
    }
    async void SelectedCustomerFilter(Customer value) 
    {
        filterCustomer = value;
        if (value != null)
        {
            ListGrid = ListGrid.Where(x => x.CustomerId == value.id).ToList();
        }
        else
        {
            ListGrid = ListOrder.ToList();
        }
        if (filterStaff != null)
        {
            ListGrid = ListGrid.Where(x => x.StaffId == filterStaff.id).ToList();
        }
        if (filterPromotion != null)
        {
            ListGrid = ListGrid.Where(x => x.PromotionId == filterPromotion.id).ToList();
        }
        StateHasChanged();
    }
    async void SelectedPromotionFilter(Promotion value)
    {
        filterPromotion = value;
        if (value != null)
        {
            ListGrid = ListGrid.Where(x => x.PromotionId == value.id).ToList();
        }
        else
        {
            ListGrid = ListOrder.ToList();
        }
        if (filterStaff != null)
        {
            ListGrid = ListGrid.Where(x => x.StaffId == filterStaff.id).ToList();
        }
        if (filterCustomer != null)
        {
            ListGrid = ListGrid.Where(x => x.CustomerId == filterCustomer.id).ToList();
        }
        StateHasChanged();
    }
	void AddOrderItem()
	{
		ListOrderItem.Add(new OrderItem());
	}
}